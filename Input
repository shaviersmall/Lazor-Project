'''
Lazor Project: Lazor game solution generator
Authors: Gabriele Pierre, Vasuudhaa Sonawane, Shavier Small
This script accepts a Lazor game
specification file in the ".bff" format as input.
It utilizes a random iterative approach to solve the game
and produces a solution file in a format similar to the input.

Input:
This script takes a Lazor game specification file
in the ".bff" format as input.
It employs a random iterative approach to solve the
game and generates a solution file in a format similar to the input.

*Input*
	The input file .bff contains the following information:
    starting layout of the game grid, types and quantities of
    available blocks, laser sources and paths, and intercept positions.
	x = no block allowed
	o = blocks allowed
	A = fixed reflect block
	B = fixed opaque block
	C = fixed refract block

	Axes defining block, laser and intercept positioning are as followed:
	Horizontal right : +x
	Vertical bottom : +y

*Solver*
In each iteration, random positions on the board are chosen
for block placement.
Refract blocks are then selected first to randomly populate
these positions, then reflect and finally opaque blocks.
Because refract blocks split the laser path and there are
typically fewer of them than reflect blocks, this serves to maximize the number of laser paths in fewer
iterations and thus increasing the probability of getting the right solution.
	
If the laser hits the edge of a block, depending on the block type and position relative to the laser trajectory,
laser is reflected, transmitted, both, or stopped.
A maximum number of iterations is provided to prevent infinite calculations in case a solution takes too
long or could not be found.

*Algorithm*
Code is written using Object-oriented Programming. 
5 class objects have been created:

Lazor_game: import and parse data from .bff input file 
All data are parsed into lists of lists.
Coordinates are converted to integers.

Set_up_Board: generate a new, more detailed grid for object placement and manipulation using information
Coordinate system (tuple) starts at (0,0) in the top left corner.
Each block pieces are 2 x 2 in the new grid and are placed in positions with odd coordinates.
	
Add_Blocks: define properties of the 3 types of blocks with boolean
	
Laser: algorithm for the game solver
At each position the laser passes through, a neighbor check is performed to determine
if a block is in the immediate horizontal or vertical vicinity,which means that the laser just hits the edge of a block.
The type of the block determines new laser paths.
	
MyTest: unit test codes for various functions and components to ensure code functionality and facilitate debugging.
To solve for different levels, simply change to the desired filename in solution_generator(filename, maxiter).

*Output*
A solution.bff file containing the solution to the game written in the same format as the input file.

'''
